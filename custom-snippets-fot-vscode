{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "@todo": {
    "scope": "typescript, javascript",
    "prefix": "todo",
    "body": ["// @todo: $1"],
    "description": ""
  },

  "@discuss": {
    "scope": "typescript, javascript",
    "prefix": "discuss",
    "body": ["// @discuss: $1"],
    "description": ""
  },

  "region block": {
    "scope": "typescript",
    "prefix": "region-ins",
    "body": ["// #region $1", "$2", "// #endregion $1"],
    "description": ""
  },
  "region open": {
    "scope": "typescript",
    "prefix": "region-start",
    "body": ["// #region $1"],
    "description": ""
  },
  "region close": {
    "scope": "typescript",
    "prefix": "region-end",
    "body": ["// #endregion $1"],
    "description": ""
  },

  "spv GET": {
    "scope": "http",
    "prefix": "GET",
    "body": ["###", "{{hostName}}$1", "{{auth}}"],
    "description": "create new request"
  },
  "spv GET Params": {
    "scope": "http",
    "prefix": "GET params",
    "body": ["###", "{{hostName}}$1", "  ?p$2=v$3", "{{auth}}"],
    "description": "create new request"
  },
  "spv POST Params": {
    "scope": "http",
    "prefix": "POST",
    "body": [
      "###",
      "POST {{hostName}}$1",
      "{{auth}}",
      "{{contentTypeJson}}",
      "",
      "{",
      "  \"p$2\":\"v$3\"",
      "}"
    ],
    "description": "create new request"
  },

  "spv try catch log": {
    "scope": "typescript",
    "prefix": "spv.tryCatchLog",
    "body": [
      "try {",
      "  $2",
      "} catch (error: any) {",
      "  this.logger.logError(error, 'Function: $1. message:' + error.message, error);",
      "  throw error;",
      "}"
    ],
    "description": ""
  },

  "spv asyncfun trycatchlog": {
    "scope": "typescript",
    "prefix": "spv.fun-async",
    "body": [
      "/**",
      "* $1",
      "*/",
      "async $1($2): Promise<any$3>{",
      "  try {",
      "    $4",
      "  } catch (error: any) {",
      "    this.logger.logError(error, 'Function: $1. message:' + error.message, error);",
      "    throw error;",
      "  }",
      "}"
    ],
    "description": ""
  },
  "spv fun trycatchlog": {
    "scope": "typescript",
    "prefix": "spv.fun",
    "body": [
      "/**",
      "* $1",
      "*/",
      "$1($2): Promise<any$3>{",
      "  try {",
      "    $4",
      "  } catch (error: any) {",
      "    this.logger.logError(error, 'Function: $1. message:' + error.message, error);",
      "    throw error;",
      "  }",
      "}"
    ],
    "description": ""
  },
  "spv fun ctrl": {
    "scope": "typescript",
    "prefix": "spv.api",
    "body": [
      "// @todo: add comments",
      "@UseInterceptors(ClassSerializerInterceptor)",
      "@UseInterceptors(ResponseInterceptor)",
      "@Get('$1')",
      "async $2($3): Promise<any$4>{",
      "  $5",
      "  return {};",
      "}"
    ],
    "description": ""
  },

  "spv console": {
    "scope": "typescript, javascript",
    "prefix": "spv.log",
    "body": ["console.log('$1', $1);", "$2"],
    "description": "Log output to console"
  },

  "this.logger.logError": {
    "scope": "typescript",
    "prefix": "spv.logError",
    "body": [
      "this.logger.logError(error, `Function: $1. Error: ${error.message}`, error);$2"
    ],
    "description": "Log output to kibana"
  },
  "this.logger.logIt": {
    "scope": "typescript",
    "prefix": "spv.logIt",
    "body": ["this.logger.logIt(`$1`, $1);$3"],
    "description": "Log output to kibana"
  },
  "this.logger.log('fn')": {
    "scope": "typescript",
    "prefix": "spv.logblog",
    "body": ["this.logger.log(`Function: $1`, undefined, undefined, res$2);$3"],
    "description": "Log output to kibana"
  },
  "this.logger.error('fn')": {
    "scope": "typescript",
    "prefix": "spv.logberr",
    "body": [
      "this.logger.error(`Function: $1. Error: ${error.message}`, error?.stack ?? '', undefined, undefined, clone(error));$2"
    ],
    "description": "Log output to kibana"
  },

  "esc err": {
    "scope": "typescript",
    "prefix": "esc err",
    "body": ["throw error;"],
    "description": ""
  },

  "esc exception": {
    "scope": "typescript",
    "prefix": "esc exception",
    "body": ["throw new $1('$2');$3"],
    "description": ""
  },

  "@ts-ignore": {
    "scope": "typescript",
    "prefix": "tsignore",
    "body": ["// @ts-ignore$1"],
    "description": "insert ts ignore"
  },

  "prisma-query-log": {
    "scope": "typescript",
    "prefix": "prisma-query-log",
    "body": ["log: [{ emit: 'stdout', level: 'query' }],"],
    "description": ""
  },

  "prisma-query-log-init": {
    "scope": "typescript",
    "prefix": "prisma-query-log-onmoduleinit",
    "body": [
      "// eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "// @ts-ignore",
      "this.$$on('query', async e => {",
      "  // eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "  // @ts-ignore",
      "  // console.log(`${e.query} ${e.params}`);",
      "  console.log(`--> ${e.params}`);",
      "});"
    ],
    "description": ""
  },

  "Class Initializer": {
    "scope": "typescript",
    "prefix": "rci",
    "body": [
      "${1/([^,]+)([,\\s]*|)/attr_reader :$1\n/g}",
      "${1/([^,]+)([,\\s]*|)/# @param $1 [...]${2:+\n}/g}",
      "def initialize($1)",
      "${1/([^,]+)((,\\s*)|)/\t@$1 = $1${2:+\n}/g}",
      "end"
    ],
    "description": "Initialize Class"
  }
}
