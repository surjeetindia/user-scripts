{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:

  "bash file": {
    "prefix": "bash",
    "body": ["#!/bin/bash\n"],
    "description": "insert bash mark"
  },

  "rest-client-gen": {
    "prefix": "rest client gen",
    "scope": "shellscript",
    "body": [
      "# clear generated cc and generator",
      "cc-clear-gen",
      "",
      "# cloning generator repo",
      "git clone ssh://git@gitlab.dyninno.net:1022/common-libraries/rest-client-generator.git",
      "",
      "# copy generator to current repo",
      "cp -r ../rest-client-generator ./",
      "cd rest-client-generator",
      "",
      "# remove generator",
      "rm -rf rest-client-generator",
      "",
      "# select source of json",
      "cc-gen-openapi drpt-bo http://dreamport-bo-api.stage-travel.com/docs-json",
      "cc-gen-openapi drpt-bo /local/docs-json.json",
      "",
      "# create client-component package for testing",
      "cc-test-pkg",
      "",
      "# xxx run from target project",
      "# copy cc dist to project to link",
      "cc-link-test-pkg ../clientComponents/client-component-drpt-bo-oapi",
      "# virtual link cc to project",
      "npm link @node-libraries/dreamport-bo-oapi",
      "# unlink cc after testing",
      "cc-unlink-test-pkg @node-libraries/dreamport-bo-oapi"
    ],
    "description": "collection of commands to generate open-api-client-component"
  },

  "rest-client-docker": {
    "prefix": "rest client docker",
    "scope": "shellscript",
    "body": [
      "docker run --rm -v \\${PWD}:/local -it openapitools/openapi-generator-cli:v5.0.1 generate \\",
      "-i http://dreamport-bo-api.stage-travel.com/docs-json \\",
      "-g typescript-nestjs \\",
      "-o /local/out \\",
      "-t /local/templates/nestjs \\",
      "--additional-properties=variableNamingConvention=camelCase \\",
      "--additional-properties=invokerPackage=Dyninno\\\\\\RestClients\\\\\\\\\\${PROJECT_SHORT_NAME} \\",
      "--git-host=gitlab.dyninno.net \\",
      "--git-repo-id=rest-client-\\${GITLAB_PROJECT_NAME} \\",
      "--git-user-id=common-libraries"
    ],
    "description": "collection of commands to generate open-api-client-component"
  },

  "@forward-ref-service": {
    "scope": "typescript",
    "prefix": "forward-ref-service",
    "body": ["@Inject(forwardRef(()=>$1Service))"],
    "description": ""
  },

  "@forward-ref-module": {
    "scope": "typescript",
    "prefix": "forward-ref-module",
    "body": ["forwardRef(()=>$1)"],
    "description": ""
  },

  //   start events
  "@todo": {
    "scope": "typescript, javascript",
    "prefix": "todo",
    "body": ["// @todo: $1"],
    "description": ""
  },

  "@discuss": {
    "scope": "typescript, javascript",
    "prefix": "discuss",
    "body": ["// @discuss: $1"],
    "description": ""
  },

  "@not-in-use": {
    "scope": "typescript, javascript",
    "prefix": "inusen",
    "body": ["// @not-in-use", "$1"],
    "description": "marker not in use"
  },

  "@in-use": {
    "scope": "typescript, javascript",
    "prefix": "inuse",
    "body": ["// @in-use", "$1"],
    "description": "marker in use"
  },

  "File header": {
    "prefix": "header",
    "body": [
      "title: ${title:Enter title}",
      "date: ${date:Insert datetime string (⇧⌘I or Ctrl+Shift+I)}"
    ]
  },

  "file description": {
    "prefix": "template",
    "body": [
      "/* _* coding: utf8 *_",
      " *",
      " * filename: $TM_FILENAME",
      " *",
      " * @author: surjeet",
      " * createdAt: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      " */"
    ],
    "description": "file description"
  },
  //   end events

  //   start regions
  "region block": {
    // "scope": "typescript",
    "prefix": "region-ins",
    "body": ["// #region $1", "$2", "// #endregion $1"],
    "description": ""
  },
  "region open": {
    // "scope": "typescript",
    "prefix": "region-start",
    "body": ["// #region $1"],
    "description": ""
  },
  "region close": {
    // "scope": "typescript",
    "prefix": "region-end",
    "body": ["// #endregion $1"],
    "description": ""
  },
  //   end regions

  // start api
  "spv GET": {
    "scope": "http",
    "prefix": "GET",
    "body": ["###", "{{hostName}}$1", "{{auth}}"],
    "description": "create new request"
  },
  "spv GET Params": {
    "scope": "http",
    "prefix": "GET params",
    "body": ["###", "{{hostName}}$1", "  ?p$2=v$3", "{{auth}}"],
    "description": "create new request"
  },
  "spv POST Params": {
    "scope": "http",
    "prefix": "POST",
    "body": [
      "###",
      "POST {{hostName}}$1",
      "{{auth}}",
      "{{contentTypeJson}}",
      "",
      "{",
      "  \"p$2\":\"v$3\"",
      "}"
    ],
    "description": "create new request"
  },
  // end api

  // start exception handling
  "spv try catch log": {
    "scope": "typescript",
    "prefix": "spv.tryCatchLog",
    "body": [
      "try {",
      "  $2",
      "} catch (error: any) {",
      "  this.logger.logErr(`$1 message: ${error.message}`, {error, $2});",
      "  throw error;",
      "}"
    ],
    "description": ""
  },
  // end exception handling

  "spv asyncfun trycatchlog": {
    "scope": "typescript",
    "prefix": "spv.fun-async",
    "body": [
      "/**",
      "* $1",
      "*/",
      "async $1($2): Promise<any$3>{",
      "  try {",
      "    $4",
      "  } catch (error: any) {",
      "    this.logger.logErr(`$1 message: ${error.message}`, {error, $2});",
      "    throw error;",
      "  }",
      "}"
    ],
    "description": ""
  },
  "spv fun ctrl": {
    "scope": "typescript",
    "prefix": "spv.api",
    "body": [
      "// @todo: add comments",
      "/** */",
      "@ApiOperation({",
      "  operationId: '$1',",
      "  summary: '',",
      "  description: '',",
      "})",
      "@UseInterceptors(ClassSerializerInterceptor)",
      "@UseInterceptors(ResponseInterceptor)",
      "@Get('$1')",
      "async $2($3): Promise<any$4>{",
      "  $5",
      "  return {};",
      "}"
    ],
    "description": ""
  },

  "spv fun ctrl auth": {
    "scope": "typescript",
    "prefix": "spv.api.auth",
    "body": [
      "// @todo: add comments",
      "/** */",
      "@ApiOperation({",
      "  operationId: '$1',",
      "  summary: '',",
      "  description: '',",
      "})",
      "@UseGuards(JwtAuthGuard)",
      "@ApiBearerAuth('JWT-auth')",
      "@UseInterceptors(ClassSerializerInterceptor)",
      "@UseInterceptors(ResponseInterceptor)",
      "@Get('$1')",
      "async $2($3): Promise<any$4>{",
      "  $5",
      "  return {};",
      "}"
    ],
    "description": ""
  },

  "spv console": {
    "scope": "typescript, javascript",
    "prefix": "spv.log",
    "body": ["console.log(`$1`, $1);", "$2"],
    "description": "Log output to console"
  },

  "export": {
    "prefix": "spv export",
    "body": ["export const SPV$1 = ", "$2"],
    "description": "Log output to console"
  },

  "this.logger.logError": {
    "scope": "typescript",
    "prefix": "spv.logError",
    "body": [
      "this.logger.logError(error, `$1 message: ${error.message}`, {error, $2});$3"
    ],
    "description": "Log output to kibana"
  },
  "this.logger.logIt": {
    "scope": "typescript",
    "prefix": "spv.logIt",
    "body": ["this.logger.logIt(`$1`, $2);$3"],
    "description": "Log output to kibana"
  },
  "this.logger.logErr": {
    "scope": "typescript",
    "prefix": "spv.logErr",
    "body": [
      "this.logger.logErr(`$1 message: ${error.message}`, {error, $2});$3"
    ],
    "description": "Log output to kibana"
  },
  "this.logger.logItErr": {
    "scope": "typescript",
    "prefix": "spv.logItErr",
    "body": [
      "this.logger.logItErr(`$1 message: ${error.message}`, {error, $2});$3"
    ],
    "description": "Log output to kibana"
  },
  "this.logger.log('fn')": {
    "scope": "typescript",
    "prefix": "spv.logblog",
    "body": ["this.logger.log(`$1`, undefined, undefined, res$2);$3"],
    "description": "Log output to kibana"
  },
  "this.logger.error('fn')": {
    "scope": "typescript",
    "prefix": "spv.logberr",
    "body": [
      "this.logger.error(`$1 message: ${error.message}`, error?.stack ?? '', undefined, undefined, clone(error));$2"
    ],
    "description": "Log output to kibana"
  },

  "esc err": {
    "scope": "typescript",
    "prefix": "esc err",
    "body": ["throw error;"],
    "description": ""
  },

  "esc exception": {
    "scope": "typescript",
    "prefix": "esc exception",
    "body": ["throw new $1('$2');$3"],
    "description": ""
  },

  "@ts-ignore": {
    "scope": "typescript",
    "prefix": "tsignore",
    "body": ["// @ts-ignore$1"],
    "description": "insert ts ignore"
  },

  "prisma-query-log": {
    "scope": "typescript",
    "prefix": "prisma-query-log",
    "body": ["log: [{ emit: 'stdout', level: 'query' }],"],
    "description": ""
  },

  "prisma-seed-package": {
    "scope": "json",
    "prefix": "prisma-seed-package",
    "body": ["\"prisma\": {", "  \"seed\": \"ts-node prisma/seed.ts\"", "},"],
    "description": ""
  },

  "ignore": {
    "scope": "ignore",
    "prefix": "ignore",
    "body": ["# Surjeet", "api", "*.http", ".vscode", "spv/"]
  },

  "prisma-query-log-init": {
    "scope": "typescript",
    "prefix": "prisma-query-log-onmoduleinit",
    "body": [
      "// eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "// @ts-ignore",
      "this.$$on('query', async e => {",
      "  // eslint-disable-next-line @typescript-eslint/ban-ts-comment",
      "  // @ts-ignore",
      "  // console.log(`${e.query} ${e.params}`);",
      "  console.log(`--> ${e.params}`);",
      "});"
    ],
    "description": ""
  },

  "Class Initializer": {
    "scope": "typescript",
    "prefix": "rci",
    "body": [
      "${1/([^,]+)([,\\s]*|)/attr_reader :$1\n/g}",
      "${1/([^,]+)([,\\s]*|)/# @param $1 [...]${2:+\n}/g}",
      "def initialize($1)",
      "${1/([^,]+)((,\\s*)|)/\t@$1 = $1${2:+\n}/g}",
      "end"
    ],
    "description": "Initialize Class"
  },

  "cc": {
    "scope": "typescript, javascript",
    "prefix": "cc",
    "body": ["${1/([^,]+)([,\\s]*|)/console.log(`$1`, $1)\n/g}"],
    "description": "short console log"
  },

  "afn": {
    "scope": "typescript, javascript",
    "prefix": "afn",
    "body": [
      "${1/([^,]+)([,\\s]*|)/async $1(){\n  try {\n  } catch (error: any) {\n  }\n}\n/g}"
    ],
    "description": "Initialize Class"
  },

  "constructor": {
    "scope": "typescript",
    "prefix": "construct with logger",
    "body": [
      "constructor(",
      "  private readonly logger: LoggerService,",
      "){",
      "  this.logger.setContext(this.constructor.name);",
      "}"
    ],
    "description": "Initialize Class"
  },

  "tab": {
    "prefix": "tab",
    "body": ["tab"],
    "description": "Initialize Class"
  },

  // GO
  "log-info": {
    "scope": "go",
    "prefix": "log-info",
    "body": ["log.FromCtx(ctx).Info(\"$1\")"],
    "description": "Initialize Class"
  },

  // regexp
  "regex timestamp to db": {
    // "scope": "",
    "prefix": "regex timestamp to db",
    "body": [
      "([0-9]{4}-[0-9]{2}-[0-9]{2})(T)([0-9]{2}:[0-9]{2}:[0-9]{2})(.000Z)",
      "replace with \\$1 \\$3"
    ],
    "description": ""
  },

  // #region teams-tempalate
  "spv.teams generate links": {
    "scope": "",
    "prefix": "teams generate links",
    "body": ["[$1](https://$2)"],
    "description": ""
  },
  "spv.emc profile link": {
    "scope": "",
    "prefix": "emc profile link",
    "body": [
      "https://emc.asaptickets.com/vue#/user/$1",
      "https://dreamport-api.asaptickets.com/api/emc/get-users?ids=$1"
    ]
  },
  // #endregion teams-tempalate

  "spv.mysql docker restore dump": {
    "scope": "",
    "prefix": "mysql docker restore dump",
    "body": [
      "docker exec -i shrm-db /usr/bin/mysql -u shrm --password=qwerty shrm_db < dump-hrm_prod-202501301336.sql"
    ]
  },

  // #region go
  "spv.go.main": {
    "scope": "",
    "prefix": "go main",
    "body": [
      "package main",
      "",
      "import (",
      " \"fmt\"",
      " \"time\"",
      ")",
      "",
      "func main() {",
      "  fmt.Println(\"Hello\")",
      "}"
    ]
  }
  // #endregion go
}
